{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v1",
        "update_url": null
    },
    "exported_at": "2021-11-23T02:12:23+01:00",
    "name": "PaperGit",
    "author": "contact@valkrys.fr",
    "description": "Valkrys Egg that update server from Github and download server from Paper forks.",
    "features": null,
    "images": [
        "ghcr.io\/pterodactyl\/yolks:java_16",
        "ghcr.io\/pterodactyl\/yolks:java_11",
        "ghcr.io\/pterodactyl\/yolks:java_8"
    ],
    "file_denylist": [],
    "startup": "\/home\/container\/script\/start.sh --server-memory {{SERVER_MEMORY}} --jar-file {{SERVER_JARFILE}} --git-update {{AUTO_UPDATE}} --ender {{ENDER_RESET}}",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \",\r\n    \"userInteraction\": [\r\n        \"Go to eula.txt for more info.\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#\/bin\/ash\r\napt update && apt install -y git curl jq\r\n\r\ncd \/mnt\/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\nfi\r\n\r\n## pull git repo\r\nif [ \"$(ls -A \/mnt\/server)\" ]; then\r\n    echo -e \"\/mnt\/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git\/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n\t\tgit reset --hard\r\n\t\tgit pull --recurse-submodules\r\n\t\tgit submodule update --init --recursive --force\r\n    fi\r\nelse\r\n    echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\tgit submodule update --init --recursive\r\nfi\r\n\r\necho -e \"github clone complete.\\nStarting to update server...\"\r\n\r\nif [ -n \"${DL_PATH}\" ]; then\r\n    echo -e \"using supplied download url\"\r\n    DOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's\/{{\/${\/g' -e 's\/}}\/}\/g')`\r\nelse\r\n    if [ ${SERVER_TYPE} = \"purpur\" ]; then\r\n        API_URL=https:\/\/api.pl3x.net\/v2\r\n    else\r\n        API_URL=https:\/\/papermc.io\/api\/v1\r\n    fi\r\n\r\n    VER_EXISTS=`curl -s ${API_URL}\/${SERVER_TYPE}\/ | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)?' | grep true`\r\n    LATEST_PURPUR_VERSION=`curl -s ${API_URL}\/${SERVER_TYPE}\/ | jq -r '.versions' | jq -r '.[0]?'`\r\n    \r\n    if [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n        echo -e \"Chosen version is valid. Using version ${MINECRAFT_VERSION}\"\r\n    else\r\n        echo -e \"Chosen version is invalid. Defaulting to the latest ${SERVER_TYPE} version\"\r\n        MINECRAFT_VERSION=${LATEST_PURPUR_VERSION}\r\n    fi\r\n    \r\n    BUILD_EXISTS=`curl -s ${API_URL}\/${SERVER_TYPE}\/${MINECRAFT_VERSION}\/ | jq -r --arg BUILD $BUILD_NUMBER '.builds.all[] | contains($BUILD)?' | grep true`\r\n    LATEST_PURPUR_BUILD=`curl -s ${API_URL}\/${SERVER_TYPE}\/${MINECRAFT_VERSION}\/ | jq -r '.builds.latest'`\r\n    \r\n    if [ \"${BUILD_EXISTS}\" == \"true\" ] || [ ${BUILD_NUMBER} == \"latest\" ]; then\r\n        echo -e \"Chosen build is valid. Using version ${BUILD_NUMBER}\"\r\n    else\r\n        echo -e \"Chosen version is invalid. Using the latest ${SERVER_TYPE} build\"\r\n        BUILD_NUMBER=${LATEST_PURPUR_BUILD}\r\n    fi\r\n    \r\n    echo \"Version being downloaded\"\r\n    echo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n    echo -e \"Build: ${BUILD_NUMBER}\"\r\n    DOWNLOAD_URL=${API_URL}\/${SERVER_TYPE}\/${MINECRAFT_VERSION}\/${BUILD_NUMBER}\/download\r\nfi\r\n\r\necho -e \"running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n    mv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ \"${SERVER_TYPE}\" != \"waterfall\" && ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\nfi\r\n\r\necho -e \"Server update complete.\"",
            "container": "debian:buster-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "The version of minecraft to download. \r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "MINECRAFT_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the server jarfile to run the server with.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20"
        },
        {
            "name": "Download Path",
            "description": "A URL to use to download a server.jar rather than the ones in the install script. This is not user viewable.",
            "env_variable": "DL_PATH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:128"
        },
        {
            "name": "Build Number",
            "description": "The build number for the paper release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD_NUMBER",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20"
        },
        {
            "name": "Install Repo",
            "description": "The git repo to clone and install the server from",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:128"
        },
        {
            "name": "Install Branch",
            "description": "The branch of the server to install",
            "env_variable": "BRANCH",
            "default_value": "main",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:32"
        },
        {
            "name": "Auto Update",
            "description": "Pull the latest files on startup when using a GitHub repo.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean"
        },
        {
            "name": "Server Type",
            "description": "Type of server. Can be Paper, Purpur or Waterfall.",
            "env_variable": "SERVER_TYPE",
            "default_value": "purpur",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|in:paper,waterfall,purpur"
        },
        {
            "name": "User Uploaded Files",
            "description": "Skip all the install stuff if you are letting a user upload files.\r\n\r\n0 = false (default)\r\n1 = true",
            "env_variable": "USER_UPLOAD",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|bool"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Ender reset",
            "description": "Day of the week to reset ender world.\r\n\r\nMonday (1) to Sunday (7). 0 disable reset.",
            "env_variable": "ENDER_RESET",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean"
        }
    ]
}
